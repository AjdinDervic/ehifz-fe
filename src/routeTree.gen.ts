/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as HomeImport } from './routes/home'
import { Route as ArticlesImport } from './routes/articles'
import { Route as ArticlesIdImport } from './routes/articles/$id'

// Create/Update Routes

const HomeRoute = HomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const ArticlesRoute = ArticlesImport.update({
  id: '/articles',
  path: '/articles',
  getParentRoute: () => rootRoute,
} as any)

const ArticlesIdRoute = ArticlesIdImport.update({
  id: '/$id',
  path: ' /$id',
  getParentRoute: () => ArticlesRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/articles': {
      id: '/articles'
      path: '/articles'
      fullPath: '/articles'
      preLoaderRoute: typeof ArticlesImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/articles/$id': {
      id: '/articles/$id'
      path: '/$id'
      fullPath: '/articles/$id'
      preLoaderRoute: typeof ArticlesIdImport
      parentRoute: typeof ArticlesImport
    }
  }
}

// Create and export the route tree

interface ArticlesRouteChildren {
  ArticlesIdRoute: typeof ArticlesIdRoute
}

const ArticlesRouteChildren: ArticlesRouteChildren = {
  ArticlesIdRoute: ArticlesIdRoute,
}

const ArticlesRouteWithChildren = ArticlesRoute._addFileChildren(
  ArticlesRouteChildren,
)

export interface FileRoutesByFullPath {
  '/articles': typeof ArticlesRouteWithChildren
  '/home': typeof HomeRoute
  '/articles/$id': typeof ArticlesIdRoute
}

export interface FileRoutesByTo {
  '/articles': typeof ArticlesRouteWithChildren
  '/home': typeof HomeRoute
  '/articles/$id': typeof ArticlesIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/articles': typeof ArticlesRouteWithChildren
  '/home': typeof HomeRoute
  '/articles/$id': typeof ArticlesIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/articles' | '/home' | '/articles/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/articles' | '/home' | '/articles/$id'
  id: '__root__' | '/articles' | '/home' | '/articles/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ArticlesRoute: typeof ArticlesRouteWithChildren
  HomeRoute: typeof HomeRoute
}

const rootRouteChildren: RootRouteChildren = {
  ArticlesRoute: ArticlesRouteWithChildren,
  HomeRoute: HomeRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/articles",
        "/home"
      ]
    },
    "/articles": {
      "filePath": "articles.tsx",
      "children": [
        "/articles/$id"
      ]
    },
    "/home": {
      "filePath": "home.tsx"
    },
    "/articles/$id": {
      "filePath": "articles/$id.tsx",
      "parent": "/articles"
    }
  }
}
ROUTE_MANIFEST_END */
